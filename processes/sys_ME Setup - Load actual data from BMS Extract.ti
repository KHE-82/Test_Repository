#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#*********************************************************************************************************************
#**** PROCESS:               sys_ME Setup - Load actual data from BMS Extract
#**** DESCRIPTION:       This process uses the csv file from the BMS Extract (Actual and Cash Payment Scenario_ and post data to ME4_reporting cube
#****
#****                                  It takes parameters from the source worksheet:
#****
#**** MODIFICATION HISTORY:
#****
#****  Date               Initials        Comments
#****  ====              ======      =========
#**** 11/04/2019    KG             Initial Revision
#*****20/05/2024	KG	 Since 123:044-01 is a C level, have to used the mapping which is N level
#***********************************************************************************************************************

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE AE CUBES & DIMENSIONS ***#
#---------------------------------------------------------------------------------------------------------------------------
snProg = 'programme';
cbAE = 'AE adjustments';
dmHLYear = 'headline year';
dmScenario = 'scenario';
dmStatus = 'status';
dmOC = 'outcome';
dmRE = 'related entity';
dmFunc = 'function';
dmReason = 'reason';
dmSPP = 'spp';
dmMeasCode = 'measure code';
dmType = 'appropriation type';
dmMA = 'movement account';
dmItem = 'appropriation item';
dmProg = snProg;
dmAcc = 'account';
dmID = 'id';
dmJur = 'jurisdiction';
dmPer = 'period';

#--------------------------------------------------------------------------------------------------------------------------
#*** DIMENSION ATTRIBUTES
#--------------------------------------------------------------------------------------------------------------------------
dmReasonAttr = '}ElementAttributes_reason';
dmAccAttr = '}ElementAttributes_account';


#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE AE ID DETAILS CUBE ***#
#---------------------------------------------------------------------------------------------------------------------------
cbID = 'AE id details';


#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE MAPPING CUBE
#---------------------------------------------------------------------------------------------------------------------------
cbMAMAP = 'MA Mapping';
dmNominal = 'nominal';

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE PROGRAMME DETAILS CUBE ***#
#---------------------------------------------------------------------------------------------------------------------------
cbProg = snProg | ' details';
dmProgMeas = snProg | ' measure';

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE MONTHLY ACTUALS CUBE (OLD)
#---------------------------------------------------------------------------------------------------------------------------
cbMA = 'MA adjustments';

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE MONTHLY ESTIMATES CUBE
#---------------------------------------------------------------------------------------------------------------------------
#cbME = 'ME reporting';
#dmMEMeas = 'ME reporting measure';
cbME = 'ME4_adjustments';
dmMEMeas = 'ME4_adjustment_measure';

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE SYSTEM DIMENSIONS ***# 
#---------------------------------------------------------------------------------------------------------------------------
dmVar = 'variables';
dmClients = '}Clients';

#---------------------------------------------------------------------------------------------------------------------------
#*** GET CURRENT HEADLINE YEAR AND SCENARIO ****#
#---------------------------------------------------------------------------------------------------------------------------
curHLYear = ATTRS(dmVar,'headline year','value');
curScenario = ATTRS(dmVar, 'headline scenario', 'value');

#---------------------------------------------------------------------------------------------------------------------------
#*** DECLARE SUBSETS AND VIEWS ***#
#---------------------------------------------------------------------------------------------------------------------------
sUser = TM1User();
IF (SUBST(sUser,1,3) @= 'CAM');
	sUser = ATTRS(dmClients, sUser, '}TM1_DefaultDisplayValue');
	lScan = SCAN('/',sUser) + 1;
	sUser = SUBST(sUser, lScan, 9);
ELSE;
	sUser = TM1User();
ENDIF;

sMEView = sUser | ' $MEClearTransferP0';
sAEVIew = sUser | ' $MATransferActual';

sRptMeas = 'value';

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#*** STEP 1 - CLEAR TARGET CUBE 
#----------------------------------------------------------------------------------------------------------------------------------------------------------------


#---------------------------------------------------------------------------------------------------------------------------
#*** DELETE EXISTING VIEWS AND SUBSETS ***#
#---------------------------------------------------------------------------------------------------------------------------
VIEWDESTROY (cbME, sMEView);
SUBSETDESTROY (dmHLYear, sMEView);
SUBSETDESTROY (dmScenario, sMEView);
SUBSETDESTROY (dmAcc, sMEView);


ASCIIOUTPUT ('whatheadlineyear.txt', psTargetHLYear, psTargetScenario);

#---------------------------------------------------------------------------------------------------------------------------
#****CREATE SUBSETS****#
#---------------------------------------------------------------------------------------------------------------------------
# headline year
SubsetCreate(dmHLYear, sMEView);
SubsetElementInsert(dmHLYear, sMEView, psTargetHLYear, 1);

# Scenario
SubsetCreate(dmScenario, sMEView);
SubsetElementInsert(dmScenario, sMEView, psTargetScenario, 1);

# Account
#MDX = '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {[' | dmACC | '].[6212000]}, ALL, RECURSIVE )}, 0)}';
MDX = '{ EXCEPT( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [' | dmAcc | '] )}, 0)}, { [' | dmAcc | '].[9000701], [' | dmAcc | '].[9000702]}) }';
SUBSETCREATEBYMDX (sMEView, MDX);


#*** BUILD VIEW ***#
VIEWCREATE (cbME, sMEView);
VIEWSUBSETASSIGN (cbME, sMEView, dmHLYear, sMEView);
VIEWSUBSETASSIGN (cbME, sMEView, dmScenario, sMEView);
VIEWSUBSETASSIGN (cbME, sMEView, dmAcc, sMEView);

VIEWZEROOUT (cbME, sMEView);

#---------------------------------------------------------------------------------------------------------------------------
#*** DELETE EXISTING VIEWS AND SUBSETS ***#
#---------------------------------------------------------------------------------------------------------------------------
VIEWDESTROY (cbME, sMEView);
SUBSETDESTROY (dmHLYear, sMEView);
SUBSETDESTROY (dmScenario, sMEView);
SUBSETDESTROY (dmAcc, sMEView);

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

IF (DIMIX (dmNominal, vsAcc) = 0);
	DIMENSIONELEMENTINSERTDIRECT (dmNominal, '', vsAcc, 'N');
ENDIF;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



IF (vsScenario @= 'Actuals');
#	ITEMSKIP;
ENDIF;

sTargetProg = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'programme');
IF (sTargetProg @<> '');
	sTargetProg = SUBST(sTargetProg, 1, 10);
	IF (sTargetProg @= '123:044-01');
		sTargetProg = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'programme');
	ELSE;
		sTargetProg = sTargetProg;
	ENDIF;
ENDIF;


sTargetAcc = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'account');
sTargetMA = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'movement account');
sTargetRE = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'related entity');
sTargetJur = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'jurisdiction');
sTargetCashAcc = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'cash account');
sTargetCashRE = CELLGETS (cbMAMAP, 'default', 'default', vsAcc, 'cash related entity');

sTargetID = '0000A';

sAcctAppnReqQM = '';
sMvtAcctAppnReqQM = '';

#------------------------------------------------------------------------------------
#--- GET APPROPRIATION ITEM CODE
#------------------------------------------------------------------------------------

sMACheck = ATTRS(dmAcc , sTargetAcc , 'movement account Required');
sAcctAppnReqQM = ATTRS(dmAcc , sTargetAcc , 'Appropriation Type Required');
sMvtAcctAppnReqQM = ATTRS(dmMA , sTargetMA , 'Appropriation Type Required');



IF (sMACheck @= '');
	IF(sAcctAppnReqQM @='');
		sApprnItem = '-';
	ELSE;
		sApprnItem = CELLGETS (cbProg, curHLYear, curScenario, sTargetProg, 'appropriation item');
		IF (DIMIX (dmItem, sApprnItem) <> 0);
			sApprnItem = DIMENSIONELEMENTPRINCIPALNAME (dmItem, sApprnItem);
		ELSE;
			sApprnItem = '-';
		ENDIF;
	ENDIF;

ELSE;
	IF (sMvtAcctAppnReqQM @='');
		sApprnItem = '-';
	ELSE;
		sApprnItem = CELLGETS (cbProg, curHLYear, curScenario, sTargetProg, 'appropriation item');
		IF (DIMIX (dmItem, sApprnItem) <> 0);
			sApprnItem = DIMENSIONELEMENTPRINCIPALNAME (dmItem, sApprnItem);
		ELSE;
			sApprnItem = '-';
		ENDIF;
	ENDIF;
ENDIF;


#------------------------------------------------------------------------------------
#--- GET SPP CODE
#------------------------------------------------------------------------------------
sSPP = CELLGETS (cbProg, curHLYear, curScenario, sTargetProg, 'SPP');
IF (DIMIX (dmSPP, sSPP) <> 0);
	sSPP = DIMENSIONELEMENTPRINCIPALNAME (dmSPP, sSPP);
ELSE;
	sSPP = '-';
ENDIF;


#------------------------------------------------------------------------------------
## Need to skip any of the move account codes on provisions is they came in they have a tendence to turnup in the flat file but will not load.
#------------------------------------------------------------------------------------
IF ((ELISANC(dmAcc, '3345100', sTargetAcc) = 1) % (ELISANC(dmAcc, '3365100', sTargetAcc) = 1) % (ELISANC(dmAcc, '3380100', sTargetAcc) = 1));
	 ITEMSKIP;
ENDIF;

nFactor = 1000;
#nFactor = 1;
nNewValue = ROUNDP (vnValue/ nFactor,0);


#------------------------------------------------------------------------------------
#--- LOAD DATA
#------------------------------------------------------------------------------------

	ASCIIOUTPUT ('me1.txt', cbME, psTargetHLYear, psTargetScenario, sTargetRE, sSPP, sTargetMA, sTargetProg, sApprnItem, vsAcc, sTargetAcc, sTargetID, sTargetJur, vsPer, sRptMeas);


IF (vsScenario @= 'Actuals');

	IF (CELLISUPDATEABLE (cbME, psTargetHLYear, psTargetScenario, sTargetRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetAcc, sTargetID, sTargetJur, vsPer, sRptMeas) =1);
		nOldValue = CELLGETN (cbME, psTargetHLYear, psTargetScenario, sTargetRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
		CELLPUTN (nOldValue + nNewValue, cbME, psTargetHLYear, psTargetScenario, sTargetRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
		ASCIIOUTPUT ('me.txt', cbME, psTargetHLYear, psTargetScenario, sTargetRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
	ENDIF;

ELSE;

	IF (CELLISUPDATEABLE (cbME, psTargetHLYear, psTargetScenario, sTargetCashRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetCashAcc, sTargetID, sTargetJur, vsPer, sRptMeas) =1);
		nOldValue = CELLGETN (cbME, psTargetHLYear, psTargetScenario, sTargetCashRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetCashAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
		CELLPUTN (nOldValue + nNewValue, cbME, psTargetHLYear, psTargetScenario, sTargetCashRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetCashAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
		ASCIIOUTPUT ('me.txt', cbME, psTargetHLYear, psTargetScenario, sTargetCashRE, sSPP, sTargetMA, sTargetProg, sApprnItem, sTargetCashAcc, sTargetID, sTargetJur, vsPer, sRptMeas);
	ENDIF;

ENDIF;




#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion